language: cpp
os: linux
dist: focal
compiler:
  - gcc
notifications:
  email: false
cache:
  - directories:
      - $HOME/.cache

jobs:
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
            - lcov
#          update: true
      env:
        - MATRIX_EVAL="CXX_COMPILER=g++-9; sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-9 90"

    - os: osx
      osx_image: xcode12.2
      addons:
        homebrew:
          packages:
            - lcov
#          update: true

      env:
        - MATRIX_EVAL="CXX_COMPILER=clang++"


before_install:
  - eval "${MATRIX_EVAL}"

install:
  # (fake) install dependencies (usually involves wget, configure, make, ...)
  # install into cache folder (build binaries+headers only, no sources and do NOT build there)
  - mkdir -p $HOME/.cache
  - touch $HOME/.cache/mydependency.so

script:
  - cmake -Sexec -Bbuild -DCODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Coverage -DCMAKE_CXX_COMPILER=$CXX_COMPILER -DCMAKE_BUILD_TYPE=Debug ..
  - cd build
  - make

after_success:
  # Create lcov report
  # capture coverage info
  - lcov --directory . --capture --output-file coverage.info
  # filter out system and extra files.
  # To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
  - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
  # output coverage data for debugging (optional)
  - lcov --list coverage.info
  # Uploading to CodeCov
  # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
